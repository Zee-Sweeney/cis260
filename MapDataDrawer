import java.util.*;
import java.io.*;
import java.awt.*;

public class MapDataDrawer
{

  private int[][] grid;

  public MapDataDrawer(String filename, int rows, int cols){
      // initialize grid 
      grid = new int[rows][cols];
      
      //read the data from the file into the grid
      File dataFile = new File(filename);
      try {
         Scanner dataInput = new Scanner(dataFile);
         for (int i=0; i<rows; i++) {
            for (int j=0; j<cols;j++) {
               grid[i][j] = dataInput.nextInt();
            
            }
         }
         
      } catch (Exception e) { e.printStackTrace();}

  }
  
  /**
   * @return the min value in the entire grid
   */
  public int findMin() {
   int min = Integer.MAX_VALUE;  //Declaring what int min is.
     
      for (int i=0; i<grid.length; i++) {  //Declaring int i as zero, that i is less than the length of the grid, i goes up by 1 evee time it loops
         for (int j=0; j<grid[i].length; j++) { //Did the same for j but j is less than the length of grid array i 
             if (grid[i][j] < min) {
              min = grid[i][j]; //If the grid array i,j are less than min then declaring min is the grid array i,j
         }
      }  //declaring that min = Integer.MAX_VALUE you make sure that min will always be less than the max
   }
      return min; //returning whatever min is
  }

  /**
   * @return the max value in the entire grid
   */
  public int findMax(){
     int max = Integer.MIN_VALUE;
        
     for (int i=0; i<grid.length; i++) {
         for (int j=0; j<grid[i].length; j++) {
             if (grid[i][j] > max) {
                 max = grid[i][j];
         }
      }  //declaring that max = Integer.MIN_VALUE you make sure that max will always be greater than the min
   }
      return max; //returning whatever min is

  }
  
  /**
   * @param col the column of the grid to check
   * @return the index of the row with the lowest value in the given col for the grid
   */
  public  int indexOfMinRow(int col){
    int minRow = 0;
    int min = Integer.MAX_VALUE;
      
    for (int i=0; i<grid.length; i++) {  
        if(grid[i][col] < min) {    
        min = grid[i][col];    //If the grid array i,col are less than min then declaring min is the grid array i,col
        minRow = i;  
      }
    }
      return minRow; //The min row equal i and is returning the row with the lowest value 
 }
  
  /**
   * Draws the grid using the given Graphics object.
   * Colors should be grayscale values 0-255, scaled based on min/max values in grid
   */
  public void drawMap(Graphics g){
      int min = findMin();
      int max = findMax();
      
      for (int i=0; i<480; i++) {
         for (int j=0; j<480; j++) {
            int c = (255 * (grid[i][j] - min)) / (max - min);
            g.setColor(new Color(c, c, c));
            g.fillRect(j, i, 1, 1);
         }
      }
   }

   /**
   * Find a path from West-to-East starting at given row.
   * Choose a foward step out of 3 possible forward locations, using greedy method described in assignment.
   * @return the total change in elevation traveled from West-to-East
   */
  public int drawLowestElevPath(Graphics g, int row){
    int elevChange = 0;
      // Implement this method in Programming Assignment 2
      return elevChange;
          
  }

   private int minOfThree(int a, int b, int c) {
      if ((a < b) && (a < c)) return a;
      if ((b < a) && (b < c)) return b;
      if ((c < a) && (c < b)) return c;
      return 0;
   }
  
}
